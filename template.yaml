AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  EmailAddress:
    Type: String
  DomainName:
    Type: String
  HostedZoneId:
    Type: String

Resources:
  ContactSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: iwrtc-contact
      Subscription:
        - Protocol: email
          Endpoint: !Ref EmailAddress

  ContactMeAPIRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-sns-publish"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "sns:Publish"
                Effect: "Allow"
                Resource: !Ref ContactSnsTopic
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  IWriteTheApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowHeaders: "'Authorization, Content-Type, Accepts'"
        AllowOrigin: "'*'"
        AllowMethods: "'GET, PUT, DELETE'"
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Ref: AWS::StackName
        paths:
          '/contact':
            post:
              responses:
                "202":
                  description: Accepted
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:action/Publish"
                credentials: !GetAtt ContactMeAPIRole.Arn
                requestParameters:
                  integration.request.querystring.Message: "method.request.body"
                  integration.request.querystring.TopicArn: !Sub "'${ContactSnsTopic}'"
                  integration.request.querystring.Subject: "'[IWTC] Contact form submission'"
                responses:
                  default:
                    statusCode: 202
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Authorization, Content-Type, Accepts'"
                      method.response.header.Access-Control-Allow-Methods : "'GET, PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"

  WebsiteBucket:
    Type: AWS::S3::Bucket
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CloudFrontOAI
            Effect: Allow
            Principal:
              CanonicalUser:
                - !GetAtt OAI.S3CanonicalUserId
            Action: s3:getObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub api.${DomainName}
      ValidationMethod: DNS

  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref ApiCertificate
      DomainName: !Sub api.${DomainName}
      EndpointConfiguration:
        Types:
          - EDGE

  ApiMapping:
    Type:  AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref CustomDomain
      RestApiId: !Ref IWriteTheApi
      Stage: Prod

  ApiRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub api.${DomainName}
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CustomDomain.DistributionDomainName
        HostedZoneId: !GetAtt CustomDomain.DistributionHostedZoneId

  WebsiteCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  AccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: expire-90-days
            ExpirationInDays: 90
            Status: Enabled

  OAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for webpages

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Comment: Webpages
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_All
        Logging:
          Bucket: !Sub ${AccessLogBucket}.s3.amazonaws.com
        Origins:
          - Id: S3-console
            DomainName: !GetAtt WebsiteBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OAI}'
        DefaultCacheBehavior:
          TargetOriginId: S3-console
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          MaxTTL: 0
          DefaultTTL: 0
          AllowedMethods: ["HEAD", "GET", "OPTIONS"]
          CachedMethods: ["HEAD", "GET", "OPTIONS"]
          Compress: true
          LambdaFunctionAssociations:
            - EventType: 'origin-request'
              LambdaFunctionARN: !Ref IndexRewriter.Version
            - EventType: 'viewer-response'
              LambdaFunctionARN: !Ref SecurityHeaders.Version
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  WebsiteRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # magic string for cloudfront

  LambdaEdgeRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "AllowLambdaAndEdge"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
  IndexRewriter:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: IndexRewriter.handler
      Runtime: nodejs8.10
      CodeUri: ./lambda_util
      Role: !GetAtt LambdaEdgeRole.Arn
      AutoPublishAlias: live
  SecurityHeaders:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: SecurityHeaders.handler
      Runtime: nodejs8.10
      CodeUri: ./lambda_util
      Role: !GetAtt LambdaEdgeRole.Arn
      AutoPublishAlias: live

Outputs:
  SiteS3Bucket:
    Description: S3 bucket name for static site data
    Value: !Ref WebsiteBucket